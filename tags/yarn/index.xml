<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Yarn on PrayinForRain.dev</title><link>https://prayinforrain.github.io/archived-blog/tags/yarn/</link><description>Recent content in Yarn on PrayinForRain.dev</description><generator>Hugo</generator><language>ko</language><lastBuildDate>Tue, 30 May 2023 02:27:49 +0900</lastBuildDate><atom:link href="https://prayinforrain.github.io/archived-blog/tags/yarn/index.xml" rel="self" type="application/rss+xml"/><item><title>얀 베리 탐험하기</title><link>https://prayinforrain.github.io/archived-blog/posts/2023/05/exploring-yarn-berry/</link><pubDate>Tue, 30 May 2023 02:27:49 +0900</pubDate><guid>https://prayinforrain.github.io/archived-blog/posts/2023/05/exploring-yarn-berry/</guid><description>&lt;h2 id="내-레포의-위험한-녀석">내 레포의 위험한 녀석&lt;/h2>
&lt;p>&lt;img src="https://prayinforrain.github.io/archived-blog/images/posts/2023/05/exploring-yarn-berry/01.png" alt="cds issue">&lt;/p>
&lt;p>최근 &lt;a href="https://github.com/c-h-w-h/cds">차가운 디자인 시스템(CDS)&lt;/a>의 패키지 매니저를 &lt;strong>Yarn berry&lt;/strong>로 마이그레이션 하는 작업을 하고 있다. 이유는 후술할 &lt;code>node_modules&lt;/code> 자체의 단점도 있고, 내 데스크탑이 HDD를 사용하기 때문에 &lt;code>node_modules&lt;/code>의 수십만 개의 파일들을 다루는 것이 너무 느려서 강력 추천했다.&lt;/p>
&lt;p>하지만 사실 나는 PnP가 어떻게 패키지들을 resolve하는지 전혀 모른다. 그저 어떻게 해야 오류 없이 쓸 수 있는지만 열심히 고민했는데, 팀원들에게 설명할 때 마다 막연히 얀베리가 잘못했겠죠~ 하는 스스로에게 자괴감을 느껴 이 기회에 한 번 Yarn PnP를 똑바로 마주해 보기로 했다.&lt;/p></description></item><item><title>Next.js Storybook에 Yarn PnP 적용하기</title><link>https://prayinforrain.github.io/archived-blog/posts/2023/04/nextjs-storybook-with-pnp/</link><pubDate>Thu, 27 Apr 2023 15:32:50 +0900</pubDate><guid>https://prayinforrain.github.io/archived-blog/posts/2023/04/nextjs-storybook-with-pnp/</guid><description>&lt;h2 id="storybook을-쓰려고-했는데">Storybook을 쓰려고 했는데&lt;/h2>
&lt;p>최근 Storybook을 사용할 일이 무척 많았다. 언젠가는 포스팅을 해야 할 CDS 프로젝트부터 &lt;a href="https://prayinforrain.github.io/archived-blog/posts/2023/04/numble-talk/">넘블 챌린지&lt;/a>도 있었고&amp;hellip; 처음엔 너무 낯설었지만 공통된 컴포넌트들을 미리 설계해 두고 재사용하는 것이 좀 더 깔끔한 설계가 되는 것 같아 매력을 느꼈다.&lt;/p>
&lt;p>그런데 문제는 내 작업 환경에 있었다. 꽤 연식이 된 윈도우 데스크탑에 수십가지 개발 환경을 섞어 놓고, 요새는 게임에도 못 쓰는 처참한 성능의 HDD에 레포를 두고 쓰니 종속성 패키지 설치도 커피 한 잔 타와야 하는 시간이 걸리니 Yarn Berry의 사용이 반필수가 되어버렸다. 넘블 챌린지 때 Yarn Berry를 사용하고 싶었지만 애석하게도 수 많은 문제에 시달려 포기했는데, 여유가 생긴 지금 마음을 다잡고 다시 시도해 보기로 했다.&lt;/p></description></item><item><title>npm vs yarn vs pnpm</title><link>https://prayinforrain.github.io/archived-blog/posts/2022/11/npm-vs-yarn-vs-pnpm/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>https://prayinforrain.github.io/archived-blog/posts/2022/11/npm-vs-yarn-vs-pnpm/</guid><description>&lt;p>지금까지 저는 아무 의심 없이 npm을 사용해왔습니다. 이따금씩 &lt;code>node_modules&lt;/code> 폴더가 저를 고통스럽게 했던 시간들이 있었지만, 프로젝트 초기화에 정말 이상한 행동만 하지 않으면 &lt;code>npm i&lt;/code> 한 줄과 커피 한 잔으로 모든게 문제 없이 동작했으니까요. 하지만 우리는 슬랙의 어떤 분을 통해, npm보다 좋은 방법이 있음을 알고 있습니다. 이번 포스트에서는 &lt;code>yarn&lt;/code>과 &lt;code>pnpm&lt;/code>을 체험해 보도록 하겠습니다.&lt;/p>
&lt;h2 id="-tldr">🤷 TL;DR&lt;/h2>
&lt;ul>
&lt;li>npm의 의존성 관리는 사실 매우 비효율적이다.&lt;/li>
&lt;li>이 문제를 보완한 패키지 매니저가 yarn, pnpm이다.&lt;/li>
&lt;li>각 패키지 매니저로의 마이그레이션은 매우 쉽다. 긍정적으로 고려해보자.&lt;/li>
&lt;/ul>
&lt;h2 id="-npm">🎁 npm&lt;/h2>
&lt;p>&lt;img src="https://prayinforrain.github.io/archived-blog/images/posts/2022/11/npm-vs-yarn-vs-pnpm/npm_vs_yarn_01.png" alt="Untitled">&lt;/p></description></item></channel></rss>