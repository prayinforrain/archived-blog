<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pnpm on PrayinForRain.dev</title><link>https://prayinforrain.github.io/archived-blog/tags/pnpm/</link><description>Recent content in Pnpm on PrayinForRain.dev</description><generator>Hugo</generator><language>ko</language><lastBuildDate>Fri, 18 Nov 2022 16:42:55 +0900</lastBuildDate><atom:link href="https://prayinforrain.github.io/archived-blog/tags/pnpm/index.xml" rel="self" type="application/rss+xml"/><item><title>npm vs yarn vs pnpm</title><link>https://prayinforrain.github.io/archived-blog/posts/2022/11/npm-vs-yarn-vs-pnpm/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>https://prayinforrain.github.io/archived-blog/posts/2022/11/npm-vs-yarn-vs-pnpm/</guid><description>&lt;p>지금까지 저는 아무 의심 없이 npm을 사용해왔습니다. 이따금씩 &lt;code>node_modules&lt;/code> 폴더가 저를 고통스럽게 했던 시간들이 있었지만, 프로젝트 초기화에 정말 이상한 행동만 하지 않으면 &lt;code>npm i&lt;/code> 한 줄과 커피 한 잔으로 모든게 문제 없이 동작했으니까요. 하지만 우리는 슬랙의 어떤 분을 통해, npm보다 좋은 방법이 있음을 알고 있습니다. 이번 포스트에서는 &lt;code>yarn&lt;/code>과 &lt;code>pnpm&lt;/code>을 체험해 보도록 하겠습니다.&lt;/p>
&lt;h2 id="-tldr">🤷 TL;DR&lt;/h2>
&lt;ul>
&lt;li>npm의 의존성 관리는 사실 매우 비효율적이다.&lt;/li>
&lt;li>이 문제를 보완한 패키지 매니저가 yarn, pnpm이다.&lt;/li>
&lt;li>각 패키지 매니저로의 마이그레이션은 매우 쉽다. 긍정적으로 고려해보자.&lt;/li>
&lt;/ul>
&lt;h2 id="-npm">🎁 npm&lt;/h2>
&lt;p>&lt;img src="archived-blog/images/posts/2022/11/npm-vs-yarn-vs-pnpm/npm_vs_yarn_01.png" alt="Untitled">&lt;/p></description></item></channel></rss>