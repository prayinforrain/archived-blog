<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on PrayinForRain.dev</title><link>http://prayinforrain.github.io/post/</link><description>Recent content in Posts on PrayinForRain.dev</description><generator>Hugo -- gohugo.io</generator><language>ko</language><lastBuildDate>Wed, 15 Feb 2023 15:17:00 +0900</lastBuildDate><atom:link href="http://prayinforrain.github.io/post/index.xml" rel="self" type="application/rss+xml"/><item><title>Firebase를 TypeScript에서 사용하기</title><link>http://prayinforrain.github.io/post/2023/02/firebase-with-typescript/</link><pubDate>Wed, 15 Feb 2023 15:17:00 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/02/firebase-with-typescript/</guid><description>최근에 들어서 Firebase가 필요한 일이 있었다. 대학교에서 써본 경험은 있었는데, 오랜만에 만난 Firebase는 예전같지 않았다. 가장 큰 문제는 Firebase가 제공하는 데이터베이스인 Firestore는 문서를 가져와도 타입을 제대로 정의할 수 없다는 것. 자동완성이 안되는 타입스크립트는.. 그.. 왜..? 물론 데이터스</description></item><item><title>Typescript Generic</title><link>http://prayinforrain.github.io/post/2023/02/typescript-generic/</link><pubDate>Wed, 01 Feb 2023 02:01:15 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/02/typescript-generic/</guid><description>타입스크립트와 리액트를 같이 사용할 때, 우리는 useState 훅을 아래와 같이 사용합니다. 1 const [name, setName] = useState&amp;lt;string&amp;gt;(&amp;#34;지상렬&amp;#34;); 뭔진 몰라도, 저 꺽쇠 괄호를 사용해서 state가 다룰 상태의 타입을 지정할 수가 있습니다. 사실 적지 않아도 알아서 추론해 주지만, 아무튼 name.split('</description></item><item><title>Hugo로 블로그를 옮기자</title><link>http://prayinforrain.github.io/post/2023/01/migrating-to-hugo/</link><pubDate>Mon, 30 Jan 2023 19:17:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/01/migrating-to-hugo/</guid><description>알음알음 티스푼 공사로 티스토리에서 이 곳으로 블로그를 옮겼습니다. 티스토리에 있던 컨텐츠 대부분은 옮기지 않았습니다. 별 의미도 없고 너무 사적인 내용이 많았기 때문입니다. 또 티스토리만의 감성이라고 해야 하나.. 약간 그 곳에 더 맞는 포인트들이 있어서 아카이브같은 느낌으로 그냥 티스토리에 두기로 했습니다. 곳곳에 티스토리 링크가 있으니 시간</description></item><item><title>Tree Shaking</title><link>http://prayinforrain.github.io/post/2023/01/tree-shaking/</link><pubDate>Wed, 25 Jan 2023 17:17:15 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/01/tree-shaking/</guid><description>용량을 절약하는 방법 웹페이지의 성능을 이야기하는 가장 직관적인 지표는 아마 페이지에 사용되는 파일의 크기일 것입니다. 파일의 크기가 무겁다면 파일을 다운받는 데 시간이 오래 걸리고, 다운로드한 파일을 읽고 렌더링 하는데도 시간이 오래 걸릴 것입니다. 따라서 번들 파일의 용량을 다이어트 하는 것은 사이트 성능에 꽤 중요한 역할을 합니다. 위 사진은 팀 프</description></item><item><title>ECMAScript</title><link>http://prayinforrain.github.io/post/2023/01/ecmascript/</link><pubDate>Wed, 25 Jan 2023 16:35:01 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/01/ecmascript/</guid><description>Ecma international Ecma International is an industry association dedicated to the standardization of information and communication systems Emca International은 정보통신 시스템의 표준화를 위한 국제 표준화 기구입니다. &amp;gt; https://www.ecma-international.org/ Ecma International은 Ecma 사이트에서 소개하듯, 정보통신 시스템의 표준을 만들기 위한 국제 기구입니다. C#, JSON, .u3d 확장자 등 여러 방면에서의 표준안을 제시하였으며, 개발자를 위한 IEEE같은 존재로 이</description></item><item><title>CSS의 display 속성</title><link>http://prayinforrain.github.io/post/2023/01/css-display/</link><pubDate>Mon, 16 Jan 2023 16:38:15 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/01/css-display/</guid><description>CSS의 display 속성은 HTML element가 block인지, inline인지, 그리고 자식 element들을 어떤 식으로 표시할지를 정하는 속성입니다. 다시 말해 요소 자체가 형제 요소와 배치되는 방법과, 자식 요소를 배치하는 방법을 함께 정의하기 때문에 ‘안쪽’과 ‘바깥쪽’으로 속성을 나눌 수 있습니다. display: 바깥쪽 block 한 줄에는 한 요소만 올 수 있게</description></item><item><title>브라우저 렌더링과 성능</title><link>http://prayinforrain.github.io/post/2023/01/browser-rendering-performance/</link><pubDate>Mon, 16 Jan 2023 16:38:15 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/01/browser-rendering-performance/</guid><description>브라우저 렌더링 성능 최적화를 위해, 브라우저가 어떻게 HTML 문서를 화면에 그리는지 과정에 대해 이해할 필요가 있습니다. 브라우저 렌더링은 아래 사진과 같은 흐름으로 이루어집니다. 서버로부터 HTML, CSS, JavaScript 파일을 받아와 HTML → DOM, CSS → CSSOM으로 변환하고 Render Tree를 구성합니다. Render Tree의 노드들에 대한 위치와 크기를 계산합니다. Render Tree의 루</description></item><item><title>CSS의 크기 단위</title><link>http://prayinforrain.github.io/post/2023/01/size-units-in-css/</link><pubDate>Fri, 13 Jan 2023 23:39:15 +0900</pubDate><guid>http://prayinforrain.github.io/post/2023/01/size-units-in-css/</guid><description>CSS의 크기 단위 CSS에는 다양한 단위가 존재합니다. 우리가 잘 아는 px와 %부터, em, rem, pt, vh, vw 등등 다양한 단위가 존재하는데요, 이 크기 단위들을 언제 어떻게 사용하면 좋을지에 대해 정리해 보았습니다. 상대 단위와 절대 단위 px과 %를 먼저 비교해 보면, px은 우리가 알고 있는 컴퓨터 화면의 1픽셀을 의미합니다. 이는 어느 화면에서나 같은 크기</description></item><item><title>모헤윰 mo:heyum - 프로젝트 회고</title><link>http://prayinforrain.github.io/post/2022/12/finishing-moheyum/</link><pubDate>Wed, 21 Dec 2022 03:30:25 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/12/finishing-moheyum/</guid><description>티스토리 블로그에 작성했던 부스트캠프 팀 프로젝트의 회고 글이다. [원본 링크] 내가 팀원들한테 이 얘길 했나 모르겠는데.. 이 페이지 좀 이쁘다. 잘만드셨다.. 부스트캠프의 최종 팀 프로젝트로 나는 모헤윰이라는 SNS를 만들었다. 결과물은 꽤 괜찮다. [여기]에 간단한 시연 영상이 있다. 사실 팀 구인을 하던 때부터 나는 무엇을 만드는지는 크게 중</description></item><item><title>사이드바야 그만 깜빡여라</title><link>http://prayinforrain.github.io/post/2022/12/prevent-sidebar-blinking/</link><pubDate>Tue, 06 Dec 2022 02:11:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/12/prevent-sidebar-blinking/</guid><description>모헤윰의 프론트엔드 앱은 Next.js로 만들어져 있습니다. 팀원 그 누구도 사용해 본 적이 없음에도 굳이 선택한 이유는 NestJS를 써 보니 프레임워크를 사용하는 것이 협업 환경에서 코드 일관성을 지키는 데 도움을 줄 것이라는 막연한 기대와, SSR을 체험해 보고 싶은 학습적인 욕심이 있었습니다. 지금 돌아보니 ‘너와 함께 하길 잘 했어!’ 하는 감</description></item><item><title>마크다운 만들기 - Markdown [3/3]</title><link>http://prayinforrain.github.io/post/2022/12/making-editor-markdown/</link><pubDate>Mon, 05 Dec 2022 13:18:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/12/making-editor-markdown/</guid><description>모헤윰의 에디터 만들기 시리즈 모아보기 에디터 만들기 - ContentEditable [1/3] 에디터 만들기 - getSelection [2/3] 에디터 만들기 - Markdown [3/3] 마지막입니다. 입력하고, 게시할 수 있게 되었으니, 이제 남은 일은 서식을 적용하는 것 뿐입니다. 마크다운 문법을 이용해 어떻게 서식을 적용할 수 있을까요? 그 과정을 정리해 보겠습니다. 🤷 어떻게 할까요? 정말이지 어떻게 하면 좋을까요? 우선 제가</description></item><item><title>마크다운 만들기 - getSelection [2/3]</title><link>http://prayinforrain.github.io/post/2022/11/making-editor-getselection/</link><pubDate>Thu, 24 Nov 2022 00:53:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/11/making-editor-getselection/</guid><description>모헤윰의 에디터 만들기 시리즈 모아보기 에디터 만들기 - ContentEditable [1/3] 에디터 만들기 - getSelection [2/3] 에디터 만들기 - Markdown [3/3] 아니???????? 두 번째 글이 파서가 아니였네요. 저는 사실 이 글이 2부작이길 간절히 바랬는데, 1편에서 만든 에디터에 너무 끔찍한 버그가 있어서 이에 대해 정리해 보고자 합니다. 이걸로 3시간을 씨름하고 있었지만 모헤윰의 TIL 문서가 풍성해지</description></item><item><title>마크다운 만들기 - contentEditable [1/3]</title><link>http://prayinforrain.github.io/post/2022/11/making-editor-contenteditable/</link><pubDate>Tue, 22 Nov 2022 20:36:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/11/making-editor-contenteditable/</guid><description>모헤윰의 에디터 만들기 시리즈 모아보기 에디터 만들기 - ContentEditable [1/3] 에디터 만들기 - getSelection [2/3] 에디터 만들기 - Markdown [3/3] 모헤윰의 핵심 기능 중 하나는 마크다운 서식 지원입니다. 왜 SNS에 마크다운을 끼얹을 생각을 했나 생각해보면 최초 기획부터 있다가 기능 다이어트를 한 후 살아남았기 때문인데, 아무튼 드디어 때가 왔습니다. 내부적으로 에디터를 외부 라이브러리를 사</description></item><item><title>Emotion</title><link>http://prayinforrain.github.io/post/2022/11/emotion/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/11/emotion/</guid><description>🤷TL;DR CSS-in-JS는 프로젝트 규모가 커질수록 관리하기 어려운 CSS의 문제를 보완한다. emotion과 styled-components는 사용상의 차이가 거의 없으니 골라서 사용하자. 적절한 IDE Extension을 잘 활용하자. CSS-in-JS가 모든 경우에 대한 정답이 아님을 인지하자. 🎨CSS-in-JS</description></item><item><title>npm vs yarn vs pnpm</title><link>http://prayinforrain.github.io/post/2022/11/npm-vs-yarn-vs-pnpm/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/11/npm-vs-yarn-vs-pnpm/</guid><description>지금까지 저는 아무 의심 없이 npm을 사용해왔습니다. 이따금씩 node_modules 폴더가 저를 고통스럽게 했던 시간들이 있었지만, 프로젝트 초기화에 정말 이상한 행동만 하지 않으면 npm i 한 줄과 커피 한 잔으로 모든게 문제 없이 동작했으니까요. 하지만 우리는 슬랙의 어떤 분을 통해, npm보다 좋은 방법이 있음을 알고 있습니다. 이번 포스트에서는 yarn과 pnpm</description></item><item><title>Redux vs Recoil</title><link>http://prayinforrain.github.io/post/2022/11/redux-vs-recoil/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>http://prayinforrain.github.io/post/2022/11/redux-vs-recoil/</guid><description>🤷 TL;DR Redux는 안정적이지만, 선언과 사용이 복잡하다. Recoil은 사용이 매우 쉽지만 정식 버전이 없다. 프로젝트 규모에 따라 마음에 드는 라이브러리를 선택하자 🚪 서론 우리는 React를 사용할 때 보통 useState를 통해 상태를 관리합니다. useState는 정말 섹시하지만, 한 가지 너무 큰 단점이 있습니다. 바로 컴포넌트끼리</description></item></channel></rss>