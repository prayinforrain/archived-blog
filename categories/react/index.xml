<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>React on PrayinForRain.dev</title><link>https://prayinforrain.github.io/categories/react/</link><description>Recent content in React on PrayinForRain.dev</description><generator>Hugo</generator><language>ko</language><lastBuildDate>Fri, 18 Nov 2022 16:42:55 +0900</lastBuildDate><atom:link href="https://prayinforrain.github.io/categories/react/index.xml" rel="self" type="application/rss+xml"/><item><title>Emotion</title><link>https://prayinforrain.github.io/posts/2022/11/emotion/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>https://prayinforrain.github.io/posts/2022/11/emotion/</guid><description>&lt;h2 id="tldr">🤷TL;DR&lt;/h2>
&lt;ul>
&lt;li>CSS-in-JS는 프로젝트 규모가 커질수록 관리하기 어려운 CSS의 문제를 보완한다.&lt;/li>
&lt;li>emotion과 styled-components는 사용상의 차이가 거의 없으니 골라서 사용하자.&lt;/li>
&lt;li>적절한 IDE Extension을 잘 활용하자.&lt;/li>
&lt;li>CSS-in-JS가 모든 경우에 대한 정답이 아님을 인지하자.&lt;/li>
&lt;/ul>
&lt;h2 id="css-in-js">🎨CSS-in-JS&lt;/h2>
&lt;p>CSS-in-JS는 HTML Element의 스타일을 자바스크립트 파일을 통해서 지정하는 방식입니다. .css 파일이 하던 일을 .js 파일에게 시키는 것이죠. CSS는 CSS이고, JS는 JS입니다. 왜 굳이 둘을 합쳐야만 하는 것일까요? 이 알 수 없는 발상을 이해하려면 우선 기존 css의 단점을 살펴보겠습니다.&lt;/p>
&lt;p>&lt;img src="https://prayinforrain.github.io/images/posts/2022/11/emotion/emotion_01.png" alt="Untitled">&lt;/p></description></item><item><title>Redux vs Recoil</title><link>https://prayinforrain.github.io/posts/2022/11/redux-vs-recoil/</link><pubDate>Fri, 18 Nov 2022 16:42:55 +0900</pubDate><guid>https://prayinforrain.github.io/posts/2022/11/redux-vs-recoil/</guid><description>&lt;h2 id="-tldr">🤷 TL;DR&lt;/h2>
&lt;ul>
&lt;li>Redux는 안정적이지만, 선언과 사용이 복잡하다.&lt;/li>
&lt;li>Recoil은 사용이 매우 쉽지만 정식 버전이 없다.&lt;/li>
&lt;li>프로젝트 규모에 따라 마음에 드는 라이브러리를 선택하자&lt;/li>
&lt;/ul>
&lt;h2 id="-서론">🚪 서론&lt;/h2>
&lt;p>우리는 React를 사용할 때 보통 &lt;code>useState&lt;/code>를 통해 상태를 관리합니다. &lt;code>useState&lt;/code>는 정말 섹시하지만, 한 가지 너무 큰 단점이 있습니다. 바로 컴포넌트끼리 데이터를 주고받는 데 사용하기가 힘들다는 점입니다. 그 일을 하기 위해 등장한 것이 바로 &lt;strong>상태 관리 라이브러리&lt;/strong>입니다. 상태 관리 라이브러리의 필요성에 대해 공감하지 못하는 분들을 위해 짧은 토막글을 마련해 보았습니다.&lt;/p></description></item></channel></rss>